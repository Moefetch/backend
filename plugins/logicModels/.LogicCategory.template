import Utility from "src/Utility";
import { ILogicModels, ILogicCategorySpecialParamsDictionary, IModelDictionary, INewPicture, IPicFormStockOverrides, ISettings, IProcessDictionary } from "types";


export default class LogicModel implements ILogicModels {
    public processDictionary: IProcessDictionary;
    private utility: Utility;
    public settings: ISettings;
    constructor(settings: ISettings, utility: Utility){
      this.settings = settings;
      this.utility = utility;
      this.ProcessInput = this.ProcessInput.bind(this);
      this.processDictionary = {
        "CategoryName": { // you can have multiple hostname entries 
          "Hostname": this.ProcessInput
        }
      }
    }

    public async ProcessInput(input: string | File, album: string, optionalOverrideParams: ILogicCategorySpecialParamsDictionary, stockOptionalOverrides:IPicFormStockOverrides){
        let resultantData: INewPicture | undefined = {
            data: {},
            indexer: 0,
            isNSFW: false,
            imagesDataArray: []
          };
          
          if (typeof input == "string"){
            const type = await this.utility.getTypeFromUrl(input);
            if(type) {
                resultantData = await this.processUrl(input, album, optionalOverrideParams, stockOptionalOverrides, type);
            } else return undefined
          }
          else { //process as a file not a link
            resultantData = {data: {}, indexer: 0, imagesDataArray: []} // i need to make it download and add as is cus no processing
          }
        return resultantData;
    }

    private async processUrl(url: string, album: string, optionalOverrideParams: ILogicCategorySpecialParamsDictionary, stockOptionalOverrides: IPicFormStockOverrides, type: string)  {
        let resultantData: INewPicture | undefined = {
            data: {},
            storedResult: "categoryName",
            indexer: 0,
            isNSFW: false,
            imagesDataArray: [],
            urlsArray: [{
                imageUrl: url, 
                thumbnailUrl: type !== 'image' ? url : '',
                isVideo: type !== 'image',
                height: 0, //imageProps?.imageSize.height || 0, 
                width: 0, //imageProps?.imageSize.width || 0 
            }],
          };
        return resultantData
    }
}